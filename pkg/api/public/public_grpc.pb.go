// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: public.proto

package public

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlantsApiClient is the client API for PlantsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlantsApiClient interface {
	AddPlant(ctx context.Context, in *AddPlantRequest, opts ...grpc.CallOption) (*AddPlantResponse, error)
	UpdatePlant(ctx context.Context, in *UpdatePlantRequest, opts ...grpc.CallOption) (*UpdatePlantResponse, error)
	GetPlant(ctx context.Context, in *GetPlantRequest, opts ...grpc.CallOption) (*GetPlantResponse, error)
	GetPlants(ctx context.Context, in *GetPlantsRequest, opts ...grpc.CallOption) (*GetPlantsResponse, error)
	DeletePlant(ctx context.Context, in *DeletePlantRequest, opts ...grpc.CallOption) (*DeletePlantResponse, error)
}

type plantsApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPlantsApiClient(cc grpc.ClientConnInterface) PlantsApiClient {
	return &plantsApiClient{cc}
}

func (c *plantsApiClient) AddPlant(ctx context.Context, in *AddPlantRequest, opts ...grpc.CallOption) (*AddPlantResponse, error) {
	out := new(AddPlantResponse)
	err := c.cc.Invoke(ctx, "/go.public.plants.PlantsApi/AddPlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsApiClient) UpdatePlant(ctx context.Context, in *UpdatePlantRequest, opts ...grpc.CallOption) (*UpdatePlantResponse, error) {
	out := new(UpdatePlantResponse)
	err := c.cc.Invoke(ctx, "/go.public.plants.PlantsApi/UpdatePlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsApiClient) GetPlant(ctx context.Context, in *GetPlantRequest, opts ...grpc.CallOption) (*GetPlantResponse, error) {
	out := new(GetPlantResponse)
	err := c.cc.Invoke(ctx, "/go.public.plants.PlantsApi/GetPlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsApiClient) GetPlants(ctx context.Context, in *GetPlantsRequest, opts ...grpc.CallOption) (*GetPlantsResponse, error) {
	out := new(GetPlantsResponse)
	err := c.cc.Invoke(ctx, "/go.public.plants.PlantsApi/GetPlants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsApiClient) DeletePlant(ctx context.Context, in *DeletePlantRequest, opts ...grpc.CallOption) (*DeletePlantResponse, error) {
	out := new(DeletePlantResponse)
	err := c.cc.Invoke(ctx, "/go.public.plants.PlantsApi/DeletePlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlantsApiServer is the server API for PlantsApi service.
// All implementations must embed UnimplementedPlantsApiServer
// for forward compatibility
type PlantsApiServer interface {
	AddPlant(context.Context, *AddPlantRequest) (*AddPlantResponse, error)
	UpdatePlant(context.Context, *UpdatePlantRequest) (*UpdatePlantResponse, error)
	GetPlant(context.Context, *GetPlantRequest) (*GetPlantResponse, error)
	GetPlants(context.Context, *GetPlantsRequest) (*GetPlantsResponse, error)
	DeletePlant(context.Context, *DeletePlantRequest) (*DeletePlantResponse, error)
	mustEmbedUnimplementedPlantsApiServer()
}

// UnimplementedPlantsApiServer must be embedded to have forward compatible implementations.
type UnimplementedPlantsApiServer struct {
}

func (UnimplementedPlantsApiServer) AddPlant(context.Context, *AddPlantRequest) (*AddPlantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlant not implemented")
}
func (UnimplementedPlantsApiServer) UpdatePlant(context.Context, *UpdatePlantRequest) (*UpdatePlantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlant not implemented")
}
func (UnimplementedPlantsApiServer) GetPlant(context.Context, *GetPlantRequest) (*GetPlantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlant not implemented")
}
func (UnimplementedPlantsApiServer) GetPlants(context.Context, *GetPlantsRequest) (*GetPlantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlants not implemented")
}
func (UnimplementedPlantsApiServer) DeletePlant(context.Context, *DeletePlantRequest) (*DeletePlantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlant not implemented")
}
func (UnimplementedPlantsApiServer) mustEmbedUnimplementedPlantsApiServer() {}

// UnsafePlantsApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlantsApiServer will
// result in compilation errors.
type UnsafePlantsApiServer interface {
	mustEmbedUnimplementedPlantsApiServer()
}

func RegisterPlantsApiServer(s grpc.ServiceRegistrar, srv PlantsApiServer) {
	s.RegisterService(&PlantsApi_ServiceDesc, srv)
}

func _PlantsApi_AddPlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsApiServer).AddPlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.public.plants.PlantsApi/AddPlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsApiServer).AddPlant(ctx, req.(*AddPlantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsApi_UpdatePlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsApiServer).UpdatePlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.public.plants.PlantsApi/UpdatePlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsApiServer).UpdatePlant(ctx, req.(*UpdatePlantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsApi_GetPlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsApiServer).GetPlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.public.plants.PlantsApi/GetPlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsApiServer).GetPlant(ctx, req.(*GetPlantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsApi_GetPlants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsApiServer).GetPlants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.public.plants.PlantsApi/GetPlants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsApiServer).GetPlants(ctx, req.(*GetPlantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantsApi_DeletePlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsApiServer).DeletePlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.public.plants.PlantsApi/DeletePlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsApiServer).DeletePlant(ctx, req.(*DeletePlantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlantsApi_ServiceDesc is the grpc.ServiceDesc for PlantsApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlantsApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go.public.plants.PlantsApi",
	HandlerType: (*PlantsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPlant",
			Handler:    _PlantsApi_AddPlant_Handler,
		},
		{
			MethodName: "UpdatePlant",
			Handler:    _PlantsApi_UpdatePlant_Handler,
		},
		{
			MethodName: "GetPlant",
			Handler:    _PlantsApi_GetPlant_Handler,
		},
		{
			MethodName: "GetPlants",
			Handler:    _PlantsApi_GetPlants_Handler,
		},
		{
			MethodName: "DeletePlant",
			Handler:    _PlantsApi_DeletePlant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public.proto",
}
